{"version":3,"sources":["utils/robot.ts","hooks/input-hook/input.hook.tsx","utils/error.util.ts","utils/controller.ts","utils/table.ts","components/Commands/Commands-styled.tsx","components/Commands/Commands.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Directions","useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","target","Robot","options","name","direction","position","this","newDirection","NORTH","WEST","next","y","EAST","next2","x","SOUTH","next3","next4","hasError","setError","error","getError","Controller","table","robot","command","RegExp","test","splitPlace","split","length","parseInt","replace","d","directionEnum","turnLeft","turnRight","move","alert","toString","Table","width","height","content","fill","Array","pos","CommandsFlex","styled","div","CommandsForm","CommandsFormButton","button","CommandsOutputWrapper","CommandsOutput","pre","CommandFormErrors","controller","Commands","actions","onSubmit","evt","preventDefault","execute","type","rel","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6d20da9.chunk.js","sourcesContent":["import { IPosition } from \"./table\";\n\nexport enum Directions {\n  \"NORTH\",\n  \"EAST\",\n  \"SOUTH\",\n  \"WEST\"\n}\n\nexport interface IRobotOptions {\n  position: IPosition;\n  direction: Directions;\n}\n\nexport default class Robot {\n  public name!: string;\n  public direction: Directions;\n  private position: IPosition;\n\n  constructor(options: IRobotOptions) {\n    this.position = options.position;\n    this.direction = options.direction;\n  }\n\n  public turnLeft(): Directions {\n    const newDirection: Directions =\n      this.direction === Directions.NORTH\n        ? Directions.WEST\n        : this.direction - 1;\n    return (this.direction = newDirection);\n  }\n\n  public turnRight(): Directions {\n    const newDirection: Directions =\n      this.direction === Directions.WEST\n        ? Directions.NORTH\n        : this.direction + 1;\n    return (this.direction = newDirection);\n  }\n\n  public move(): boolean {\n    switch (this.direction) {\n      case Directions.NORTH:\n        let next = this.position.y + 1;\n        if (this.position.y <= 4) this.position.y = next;\n        break;\n      case Directions.EAST:\n        let next2 = this.position.x + 1;\n        if (this.position.x <= 4) this.position.x = next2;\n\n        break;\n      case Directions.SOUTH:\n        let next3 = this.position.y - 1;\n        if (this.position.y >= 1) this.position.y = next3;\n\n        break;\n      case Directions.WEST:\n        let next4 = this.position.x - 1;\n        if (this.position.x >= 1) this.position.x = next4;\n\n        break;\n      default:\n    }\n    return true;\n  }\n\n  public toString() {\n    return `${this.position.x}, ${this.position.y}, ${\n      Directions[this.direction]\n    }`;\n  }\n}\n","import { useState } from \"react\";\n\nexport const useInput = (initialValue: any) => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event: any) => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n","let hasError = false;\n\n// True or false\nexport const setError = (error: boolean) => {\n  hasError = error;\n};\n\nexport const getError = () => {\n  if (hasError) {\n    return \"Invalid input!\";\n  }\n};\n","import Table from \"./table\";\nimport Robot from \"./robot\";\nimport { Directions } from \"./robot\";\nimport { setError } from \"./error.util\";\n\nexport default class Controller {\n  public table: Table;\n  public robot!: Robot;\n\n  constructor(table: Table) {\n    this.table = table;\n  }\n\n  public execute(command: string): void {\n    // Command is place and there is no robot create, if the command place comes through again, recreate the position\n    // Starts with place, then validate.\n    const hasPlace = RegExp(\"PLACE*\").test(command);\n\n    if (hasPlace) {\n      const splitPlace = command.split(\",\");\n\n      if (\n        splitPlace.length < 3 ||\n        !splitPlace[0] ||\n        !splitPlace[1] ||\n        !splitPlace[2]\n      ) {\n        setError(true);\n        return;\n      }\n\n      const x = parseInt(splitPlace[0].replace(/\\D/g, \"\"), 10);\n      if (x < 0 || x > 5) {\n        setError(true);\n        return;\n      }\n\n      const y = parseInt(splitPlace[1].replace(/\\D/g, \"\"), 10);\n      if (y < 0 || y > 5) {\n        setError(true);\n        return;\n      }\n\n      const d = splitPlace[2];\n      let directionEnum = Directions.EAST; // Default value set\n\n      switch (d) {\n        case \"NORTH\":\n          directionEnum = Directions.NORTH;\n          break;\n        case \"SOUTH\":\n          directionEnum = Directions.SOUTH;\n          break;\n        case \"WEST\":\n          directionEnum = Directions.WEST;\n          break;\n        case \"EAST\":\n          directionEnum = Directions.EAST;\n          break;\n        default:\n      }\n\n      this.robot = new Robot({\n        position: { x, y },\n        direction: directionEnum\n      });\n\n      setError(false);\n    }\n\n    if (this.robot) {\n      switch (command) {\n        case \"LEFT\":\n          this.robot.turnLeft();\n          break;\n        case \"RIGHT\":\n          this.robot.turnRight();\n          break;\n        case \"MOVE\":\n          this.robot.move();\n          break;\n        case \"REPORT\":\n          alert(`Reported position: ${this.robot.toString()}`);\n          break;\n        default:\n      }\n    }\n  }\n}\n","import { fill } from \"lodash\";\n\nexport interface IPosition {\n  x: number;\n  y: number;\n}\n\nexport default class Table {\n  public content: Number[][];\n\n  constructor(public width: number = 5, public height: number = width) {\n    this.content = fill(Array(height), fill(Array(width), 0));\n  }\n\n  public isBorder(pos: IPosition): boolean {\n    return (\n      pos.x === 0 ||\n      pos.x === this.width - 1 ||\n      pos.y === 0 ||\n      pos.y === this.height - 1\n    );\n  }\n}\n","import styled from \"styled-components\";\n\nexport const CommandsFlex = styled.div`\n  form {\n    display: flex;\n    padding: 3em;\n  }\n`;\n\nexport const CommandsForm = styled.div`\n  flex: 0 0 50%;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  input {\n    padding: 0.5em;\n    background: white;\n    border: 1px solid black;\n    border-radius: 3px;\n    display: block;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const CommandsFormButton = styled.button`\n  display: inline-block;\n  color: palevioletred;\n  font-size: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  display: block;\n`;\n\nexport const CommandsOutputWrapper = styled.div`\n  flex: 0 0 50%;\n`;\n\nexport const CommandsOutput: any = styled.pre`\n  background: #001628;\n  padding-top: 20px;\n  color: #f5d67b;\n  clear: both;\n  position: relative;\n  line-height: 28px;\n  border-radius: 8px;\n  min-width: 300px;\n  overflow: hidden;\n  tab-size: 2;\n  margin: 0 0 1rem;\n\n  &:before {\n    color: #ff8a00;\n    font-weight: 700;\n    font-size: 12px;\n    content: attr(rel);\n    position: absolute;\n    top: 0.33rem;\n    left: 0.52rem;\n    width: 100%;\n    padding: 0;\n  }\n\n  code {\n    font-size: 16px;\n    line-height: 1.75;\n    background: 0 0;\n    padding: 30px;\n    white-space: pre;\n    -webkit-overflow-scrolling: touch;\n    display: block;\n    overflow-x: scroll;\n    max-width: 100%;\n    min-width: 100px;\n    scrollbar-color: #666;\n    scrollbar-width: 0.5em;\n  }\n`;\n\nexport const CommandFormErrors = styled.div`\n  color: red;\n`;\n","import React from \"react\";\nimport { useInput } from \"../../hooks/input-hook/input.hook\";\nimport Controller from \"../../utils/controller\";\nimport Table from \"../../utils/table\";\nimport {\n  CommandsForm,\n  CommandsFormButton,\n  CommandsOutput,\n  CommandsFlex,\n  CommandsOutputWrapper,\n  CommandFormErrors\n} from \"./Commands-styled\";\nimport { getError } from \"../../utils/error.util\";\n\nconst table = new Table(5, 5);\nconst controller = new Controller(table);\n\nexport function Commands() {\n  const { value, bind, reset } = useInput(\"\");\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    controller.execute(value);\n    // Reset the input on each submit\n    reset();\n  };\n\n  // Default message\n  let actions = \"Please place the robot frist\";\n\n  if (controller.robot) {\n    actions = controller.robot.toString();\n  }\n\n  return (\n    <CommandsFlex>\n      <form onSubmit={handleSubmit}>\n        <CommandsForm>\n          <label>Plese enter a command:</label>\n          <input type=\"text\" {...bind} />\n          <CommandsFormButton type=\"submit\">Execute command</CommandsFormButton>\n          <CommandFormErrors>{getError()}</CommandFormErrors>\n        </CommandsForm>\n\n        <CommandsOutputWrapper>\n          <CommandsOutput rel=\"Output\">\n            <code>{actions}</code>\n          </CommandsOutput>\n        </CommandsOutputWrapper>\n      </form>\n    </CommandsFlex>\n  );\n}\n","import React from \"react\";\nimport { Commands } from \"../Commands/Commands\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Robot simulation</h1>\n      <Commands />\n      <div className=\"commands\">\n        The following commands are available:\n        <br />\n        PLACE X,Y,F MOVE LEFT RIGHT REPORT\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}